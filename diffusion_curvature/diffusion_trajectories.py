# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/3d-diffusion-trajectory-distance-normalization.ipynb.

# %% auto 0
__all__ = ['diffusion_distances_along_trajectory', 'show_curvature_curves']

# %% ../nbs/3d-diffusion-trajectory-distance-normalization.ipynb 7
from scipy.spatial.distance import jensenshannon
def diffusion_distances_along_trajectory(diffusions):
    # given a sequence of diffusions, returns the distances between each 
    distances = [0]
    for idx in range(len(diffusions)-1):
        distances.append(
            # distances[-1] + np.linalg.norm(
            #     diffusions[idx+1] - diffusions[idx]
            # )
            distances[-1] + jensenshannon(diffusions[idx+1], diffusions[idx])
            
        )
    return np.array(distances)

# %% ../nbs/3d-diffusion-trajectory-distance-normalization.ipynb 9
from functools import partial
import numpy as np
import matplotlib.pyplot as plt
from functools import partial
from fastcore.all import *
from .core import *
from .diffusion_laziness import curvature_curves
from tqdm.auto import tqdm
import inspect

def show_curvature_curves(*diffusion_curvatures, num_ts=50, idx=0, scaling_fn=None, title="Curvature Curves", **kwargs):
    return curvature_curves(*diffusion_curvatures, idx = idx, title = title, also_plot_against_time=True)
