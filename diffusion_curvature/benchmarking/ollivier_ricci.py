# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/0b3-Ollivier-Ricci-and-Forman-Ricci.ipynb.

# %% auto 0
__all__ = ['nx_graph_from_pointcloud', 'average_orc_across_edge', 'average_frc_across_edge', 'compute_orc_curvature_of_nodes',
           'compute_frc_curvature_of_nodes']

# %% ../../nbs/0b3-Ollivier-Ricci-and-Forman-Ricci.ipynb 2
from ..kernels import get_curvature_agnostic_graph
import networkx as nx
import numpy as np
def nx_graph_from_pointcloud(X):
    G = get_curvature_agnostic_graph(X)
    nx_G = nx.from_numpy_array(G.W)
    return nx_G

# %% ../../nbs/0b3-Ollivier-Ricci-and-Forman-Ricci.ipynb 3
def average_orc_across_edge(orc, idx):
    js = list(orc.G[idx].keys())
    edge_ks = [orc.G[idx][j]['ricciCurvature'] for j in js]
    return np.mean(edge_ks)
def average_frc_across_edge(orc, idx):
    js = list(orc.G[idx].keys())
    edge_ks = [orc.G[idx][j]['formanCurvature'] for j in js]
    return np.mean(edge_ks)

# %% ../../nbs/0b3-Ollivier-Ricci-and-Forman-Ricci.ipynb 4
import networkx as nx
from GraphRicciCurvature.FormanRicci import FormanRicci
from GraphRicciCurvature.OllivierRicci import OllivierRicci
def compute_orc_curvature_of_nodes(G, idxs = None):
    G_nx = nx.from_numpy_array(G.W)
    orc = OllivierRicci(G_nx, alpha=0.5)
    orc.compute_ricci_curvature()
    ks = []
    if idxs is None: idxs = np.arange(len(G.W))
    if isinstance(idxs, int): idxs = [idxs]
    for i in idxs:
        ks.append(
            average_orc_across_edge(orc, i)
        )
    if len(ks) == 1: return ks[0]
    return ks

def compute_frc_curvature_of_nodes(G, idxs = None):
    G_nx = nx.from_numpy_array(G.W)
    frc = FormanRicci(G_nx)
    frc.compute_ricci_curvature()
    ks = []
    if idxs is None: idxs = np.arange(len(G.W))
    if isinstance(idxs, int): idxs = [idxs]
    for i in idxs:
        ks.append(
            average_frc_across_edge(frc, i)
        )
    if len(ks) == 1: return ks[0]
    return ks
