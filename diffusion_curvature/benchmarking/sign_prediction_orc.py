# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/5c-Ollivier-Ricci-and-Foreman-Sign-Prediction-Tests.ipynb.

# %% auto 0
__all__ = ['method_name', 'run_sadspheres']

# %% ../../nbs/5c-Ollivier-Ricci-and-Foreman-Sign-Prediction-Tests.ipynb 15
from tqdm.auto import tqdm, trange
from fastcore.all import *
import diffusion_curvature
import pygsp
import jax
import jax.numpy as jnp
from ..graphs import *
from ..datasets import *
from ..core import *
from ..utils import *
# from diffusion_curvature.comparison_space import *
from ..sadspheres import *
from ..kernels import *
from ..kernels import tune_curvature_agnostic_kernel

method_name = "Ollivier Ricci"

def run_sadspheres(
):
    SS1 = SadSpheres(
        dimension = dims, # Dimension of saddles and spheres
        num_pointclouds = num_pointclouds, # num pointclouds to make in total
        num_points = 2000, # num points per pointclouds
        noise_level = 0, # from 0 to 1. 1 is all noise.
        include_planes=True,
    )
    known_dim_bandwidths = {}
    if method_name in SS1.imported_methods:
        return SS1
    for X in tqdm(SS1):
        dim = X.shape[1] - 1
        if dim not in known_dim_bandwidths.keys():
            kernel, ns = tune_curvature_agnostic_kernel(X, 120, tolerance = 5, max_iterations = 100, alpha = 0)
            known_dim_bandwidths[dim] = kernel
        G_simple = kernel(X)
        ks_r = compute_orc_curvature_of_nodes(G_simple, idxs = [0])
        SS1.update(ks_r, method_name = "Ollivier Ricci")

        ks_f = compute_frc_curvature_of_nodes(G_simple, idxs = [0])
        SS1.update(ks_f, method_name = "Forman Ricci")
    SS1.save_results()
    return SS1
