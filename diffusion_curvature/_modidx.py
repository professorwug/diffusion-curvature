# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/diffusion_curvature',
                'doc_host': 'https://professorwug.github.io',
                'git_url': 'https://github.com/professorwug/diffusion_curvature',
                'lib_path': 'diffusion_curvature'},
  'syms': { 'diffusion_curvature.benchmarking.hickok': { 'diffusion_curvature.benchmarking.hickok.KDE': ( 'library/benchmarking/hickock-curvature.html#kde',
                                                                                                          'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.KDE.__call__': ( 'library/benchmarking/hickock-curvature.html#kde.__call__',
                                                                                                                   'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.KDE.__init__': ( 'library/benchmarking/hickock-curvature.html#kde.__init__',
                                                                                                                   'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.KDE.bandwidth': ( 'library/benchmarking/hickock-curvature.html#kde.bandwidth',
                                                                                                                    'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.KDE.biweight': ( 'library/benchmarking/hickock-curvature.html#kde.biweight',
                                                                                                                   'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.KDE.density': ( 'library/benchmarking/hickock-curvature.html#kde.density',
                                                                                                                  'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.KDE.epanechnikov': ( 'library/benchmarking/hickock-curvature.html#kde.epanechnikov',
                                                                                                                       'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.KDE.gauss': ( 'library/benchmarking/hickock-curvature.html#kde.gauss',
                                                                                                                'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.KDE.triweight': ( 'library/benchmarking/hickock-curvature.html#kde.triweight',
                                                                                                                    'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est',
                                                                                                                           'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est.__init__': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est.__init__',
                                                                                                                                    'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est.ball_ratios': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est.ball_ratios',
                                                                                                                                       'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est.ball_volumes': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est.ball_volumes',
                                                                                                                                        'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est.compute_Rdist': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est.compute_rdist',
                                                                                                                                         'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est.compute_density': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est.compute_density',
                                                                                                                                           'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est.compute_nbr_matrices': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est.compute_nbr_matrices',
                                                                                                                                                'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est.estimate': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est.estimate',
                                                                                                                                    'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est.fit_quad_coeff': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est.fit_quad_coeff',
                                                                                                                                          'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est.get_Rdist': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est.get_rdist',
                                                                                                                                     'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est.get_density': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est.get_density',
                                                                                                                                       'diffusion_curvature/benchmarking/hickok.py'),
                                                         'diffusion_curvature.benchmarking.hickok.scalar_curvature_est.nbr_distances': ( 'library/benchmarking/hickock-curvature.html#scalar_curvature_est.nbr_distances',
                                                                                                                                         'diffusion_curvature/benchmarking/hickok.py')},
            'diffusion_curvature.benchmarking.run_battery': { 'diffusion_curvature.benchmarking.run_battery.compute_correlations': ( 'experiments/2da-curvature-colosseum-with-diffusion-curvature.html#compute_correlations',
                                                                                                                                     'diffusion_curvature/benchmarking/run_battery.py'),
                                                              'diffusion_curvature.benchmarking.run_battery.compute_curvature_on_battery': ( 'experiments/2da-curvature-colosseum-with-diffusion-curvature.html#compute_curvature_on_battery',
                                                                                                                                             'diffusion_curvature/benchmarking/run_battery.py'),
                                                              'diffusion_curvature.benchmarking.run_battery.compute_sign_score': ( 'experiments/2da-curvature-colosseum-with-diffusion-curvature.html#compute_sign_score',
                                                                                                                                   'diffusion_curvature/benchmarking/run_battery.py'),
                                                              'diffusion_curvature.benchmarking.run_battery.result_table': ( 'experiments/2da-curvature-colosseum-with-diffusion-curvature.html#result_table',
                                                                                                                             'diffusion_curvature/benchmarking/run_battery.py')},
            'diffusion_curvature.benchmarks.compute_diffusion_curvature_of_battery': { 'diffusion_curvature.benchmarks.compute_diffusion_curvature_of_battery.compute_correlations': ( 'library/benchmarking/diffusion-curvature-of-battery.html#compute_correlations',
                                                                                                                                                                                       'diffusion_curvature/benchmarks/compute_diffusion_curvature_of_battery.py'),
                                                                                       'diffusion_curvature.benchmarks.compute_diffusion_curvature_of_battery.compute_curvature_on_battery': ( 'library/benchmarking/diffusion-curvature-of-battery.html#compute_curvature_on_battery',
                                                                                                                                                                                               'diffusion_curvature/benchmarks/compute_diffusion_curvature_of_battery.py'),
                                                                                       'diffusion_curvature.benchmarks.compute_diffusion_curvature_of_battery.compute_sign_score': ( 'library/benchmarking/diffusion-curvature-of-battery.html#compute_sign_score',
                                                                                                                                                                                     'diffusion_curvature/benchmarks/compute_diffusion_curvature_of_battery.py'),
                                                                                       'diffusion_curvature.benchmarks.compute_diffusion_curvature_of_battery.result_table': ( 'library/benchmarking/diffusion-curvature-of-battery.html#result_table',
                                                                                                                                                                               'diffusion_curvature/benchmarks/compute_diffusion_curvature_of_battery.py')},
            'diffusion_curvature.clustering': { 'diffusion_curvature.clustering.enhanced_spectral_clustering': ( 'library/core-jax/curvature-enhanced-spectral-clustering.html#enhanced_spectral_clustering',
                                                                                                                 'diffusion_curvature/clustering.py')},
            'diffusion_curvature.comparison_space': { 'diffusion_curvature.comparison_space.EuclideanComparisonSpace': ( 'library/core-jax/comparison-space-construction.html#euclideancomparisonspace',
                                                                                                                         'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.EuclideanComparisonSpace.__call__': ( 'library/core-jax/comparison-space-construction.html#euclideancomparisonspace.__call__',
                                                                                                                                  'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.EuclideanComparisonSpace.setup': ( 'library/core-jax/comparison-space-construction.html#euclideancomparisonspace.setup',
                                                                                                                               'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.construct_ndgrid': ( 'library/core-jax/comparison-space-construction.html#construct_ndgrid',
                                                                                                                 'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.construct_ndgrid_from_shape': ( 'library/core-jax/comparison-space-construction.html#construct_ndgrid_from_shape',
                                                                                                                            'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.diffusion_coordinates': ( 'library/core-jax/comparison-space-construction.html#diffusion_coordinates',
                                                                                                                      'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.euclidean_comparison_graph': ( 'library/core-jax/comparison-space-construction.html#euclidean_comparison_graph',
                                                                                                                           'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.fit_comparison_space_model': ( 'library/core-jax/comparison-space-construction.html#fit_comparison_space_model',
                                                                                                                           'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.get_graph_type': ( 'library/core-jax/comparison-space-construction.html#get_graph_type',
                                                                                                               'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.load_average_entropies': ( 'library/core-jax/comparison-space-construction.html#load_average_entropies',
                                                                                                                       'diffusion_curvature/comparison_space.py')},
            'diffusion_curvature.compute_mean_flat_entropies': { 'diffusion_curvature.compute_mean_flat_entropies.average_flat_entropies': ( 'library/core-jax/mean-flat-entropies.html#average_flat_entropies',
                                                                                                                                             'diffusion_curvature/compute_mean_flat_entropies.py'),
                                                                 'diffusion_curvature.compute_mean_flat_entropies.create_mean_entropy_database': ( 'library/core-jax/mean-flat-entropies.html#create_mean_entropy_database',
                                                                                                                                                   'diffusion_curvature/compute_mean_flat_entropies.py'),
                                                                 'diffusion_curvature.compute_mean_flat_entropies.load_average_entropies': ( 'library/core-jax/mean-flat-entropies.html#load_average_entropies',
                                                                                                                                             'diffusion_curvature/compute_mean_flat_entropies.py')},
            'diffusion_curvature.construct_battery': { 'diffusion_curvature.construct_battery.create_battery': ( 'library/datasets/construct-battery.html#create_battery',
                                                                                                                 'diffusion_curvature/construct_battery.py'),
                                                       'diffusion_curvature.construct_battery.main': ( 'library/datasets/construct-battery.html#main',
                                                                                                       'diffusion_curvature/construct_battery.py')},
            'diffusion_curvature.core': { 'diffusion_curvature.core.DiffusionCurvature': ( 'library/core-jax/core.html#diffusioncurvature',
                                                                                           'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.DiffusionCurvature.__init__': ( 'library/core-jax/core.html#diffusioncurvature.__init__',
                                                                                                    'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.DiffusionCurvature.curvature': ( 'library/core-jax/core.html#diffusioncurvature.curvature',
                                                                                                     'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.DiffusionCurvature.fit': ( 'library/core-jax/core.html#diffusioncurvature.fit',
                                                                                               'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.DiffusionCurvature.fit_transform': ( 'library/core-jax/core.html#diffusioncurvature.fit_transform',
                                                                                                         'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.DiffusionCurvature.unsigned_curvature': ( 'library/core-jax/core.html#diffusioncurvature.unsigned_curvature',
                                                                                                              'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.SimpleGraph': ( 'library/core-jax/core.html#simplegraph',
                                                                                    'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.fill_diagonal': ( 'library/core-jax/core.html#fill_diagonal',
                                                                                      'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.get_adaptive_graph': ( 'library/core-jax/core.html#get_adaptive_graph',
                                                                                           'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.get_fixed_graph': ( 'library/core-jax/core.html#get_fixed_graph',
                                                                                        'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.graphtools_graph_from_data': ( 'library/core-jax/core.html#graphtools_graph_from_data',
                                                                                                   'diffusion_curvature/core.py')},
            'diffusion_curvature.core_keops': { 'diffusion_curvature.core_keops.lazy_diffusion_matrix': ( 'library/core-pykeops.html#lazy_diffusion_matrix',
                                                                                                          'diffusion_curvature/core_keops.py'),
                                                'diffusion_curvature.core_keops.lazy_distance_matrix': ( 'library/core-pykeops.html#lazy_distance_matrix',
                                                                                                         'diffusion_curvature/core_keops.py'),
                                                'diffusion_curvature.core_keops.lazy_gaussian_kernel': ( 'library/core-pykeops.html#lazy_gaussian_kernel',
                                                                                                         'diffusion_curvature/core_keops.py'),
                                                'diffusion_curvature.core_keops.phate_distances': ( 'library/core-pykeops.html#phate_distances',
                                                                                                    'diffusion_curvature/core_keops.py')},
            'diffusion_curvature.datasets': { 'diffusion_curvature.datasets.ellipsoid': ( 'library/datasets/toy-datasets.html#ellipsoid',
                                                                                          'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.ellispoid': ( 'library/datasets/toy-datasets.html#ellispoid',
                                                                                          'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.hyperboloid': ( 'library/datasets/toy-datasets.html#hyperboloid',
                                                                                            'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.paraboloid': ( 'library/datasets/toy-datasets.html#paraboloid',
                                                                                           'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.plane': ( 'library/datasets/toy-datasets.html#plane',
                                                                                      'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.rejection_sample_for_ellipsoid': ( 'library/datasets/toy-datasets.html#rejection_sample_for_ellipsoid',
                                                                                                               'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.rejection_sample_for_hyperboloid': ( 'library/datasets/toy-datasets.html#rejection_sample_for_hyperboloid',
                                                                                                                 'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.rejection_sample_for_saddle': ( 'library/datasets/toy-datasets.html#rejection_sample_for_saddle',
                                                                                                            'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.rejection_sample_for_torus': ( 'library/datasets/toy-datasets.html#rejection_sample_for_torus',
                                                                                                           'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.rejection_sample_from_saddle': ( 'library/datasets/toy-datasets.html#rejection_sample_from_saddle',
                                                                                                             'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.sphere': ( 'library/datasets/toy-datasets.html#sphere',
                                                                                       'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.torus': ( 'library/datasets/toy-datasets.html#torus',
                                                                                      'diffusion_curvature/datasets.py')},
            'diffusion_curvature.diffusion_laziness': { 'diffusion_curvature.diffusion_laziness.entropy_of_diffusion': ( 'library/core-jax/diffusion-laziness.html#entropy_of_diffusion',
                                                                                                                         'diffusion_curvature/diffusion_laziness.py'),
                                                        'diffusion_curvature.diffusion_laziness.wasserstein_spread_of_diffusion': ( 'library/core-jax/diffusion-laziness.html#wasserstein_spread_of_diffusion',
                                                                                                                                    'diffusion_curvature/diffusion_laziness.py')},
            'diffusion_curvature.distances': { 'diffusion_curvature.distances.pairwise_euclidean': ( 'library/core-jax/manifold-distances.html#pairwise_euclidean',
                                                                                                     'diffusion_curvature/distances.py'),
                                               'diffusion_curvature.distances.phate_distances': ( 'library/core-jax/manifold-distances.html#phate_distances',
                                                                                                  'diffusion_curvature/distances.py'),
                                               'diffusion_curvature.distances.phate_distances_differentiable': ( 'library/core-jax/manifold-distances.html#phate_distances_differentiable',
                                                                                                                 'diffusion_curvature/distances.py'),
                                               'diffusion_curvature.distances.phate_distances_from_pointcloud': ( 'library/core-jax/manifold-distances.html#phate_distances_from_pointcloud',
                                                                                                                  'diffusion_curvature/distances.py'),
                                               'diffusion_curvature.distances.phate_distances_graphtools': ( 'library/core-jax/manifold-distances.html#phate_distances_graphtools',
                                                                                                             'diffusion_curvature/distances.py')},
            'diffusion_curvature.experiments.curvature_curves': { 'diffusion_curvature.experiments.curvature_curves.DiffusionCurvature.curvature_curve': ( 'experiments/2c3-are-kernels-zeitgeibers.html#diffusioncurvature.curvature_curve',
                                                                                                                                                           'diffusion_curvature/experiments/curvature_curves.py'),
                                                                  'diffusion_curvature.experiments.curvature_curves.show_curvature_curves': ( 'experiments/2c3-are-kernels-zeitgeibers.html#show_curvature_curves',
                                                                                                                                              'diffusion_curvature/experiments/curvature_curves.py')},
            'diffusion_curvature.experiments.graph_volume_normalization': { 'diffusion_curvature.experiments.graph_volume_normalization.DiffusionCurvature.division_normalized_laziness': ( 'experiments/2c5-graph-volume-normalization.html#diffusioncurvature.division_normalized_laziness',
                                                                                                                                                                                            'diffusion_curvature/experiments/graph_volume_normalization.py'),
                                                                            'diffusion_curvature.experiments.graph_volume_normalization.DiffusionCurvature.graph_volumes': ( 'experiments/2c5-graph-volume-normalization.html#diffusioncurvature.graph_volumes',
                                                                                                                                                                             'diffusion_curvature/experiments/graph_volume_normalization.py')},
            'diffusion_curvature.flattening.mioflow': { 'diffusion_curvature.flattening.mioflow.Autoencoder': ( 'library/flattening/mioflow '
                                                                                                                'for neural '
                                                                                                                'flattening.html#autoencoder',
                                                                                                                'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.Autoencoder.__init__': ( 'library/flattening/mioflow '
                                                                                                                         'for neural '
                                                                                                                         'flattening.html#autoencoder.__init__',
                                                                                                                         'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.Autoencoder.decode': ( 'library/flattening/mioflow '
                                                                                                                       'for neural '
                                                                                                                       'flattening.html#autoencoder.decode',
                                                                                                                       'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.Autoencoder.encode': ( 'library/flattening/mioflow '
                                                                                                                       'for neural '
                                                                                                                       'flattening.html#autoencoder.encode',
                                                                                                                       'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.Autoencoder.forward': ( 'library/flattening/mioflow '
                                                                                                                        'for neural '
                                                                                                                        'flattening.html#autoencoder.forward',
                                                                                                                        'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.Density_loss': ( 'library/flattening/mioflow '
                                                                                                                 'for neural '
                                                                                                                 'flattening.html#density_loss',
                                                                                                                 'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.Density_loss.__call__': ( 'library/flattening/mioflow '
                                                                                                                          'for neural '
                                                                                                                          'flattening.html#density_loss.__call__',
                                                                                                                          'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.Density_loss.__init__': ( 'library/flattening/mioflow '
                                                                                                                          'for neural '
                                                                                                                          'flattening.html#density_loss.__init__',
                                                                                                                          'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.DiffusionAffinity': ( 'library/flattening/mioflow '
                                                                                                                      'for neural '
                                                                                                                      'flattening.html#diffusionaffinity',
                                                                                                                      'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.DiffusionAffinity.__init__': ( 'library/flattening/mioflow '
                                                                                                                               'for neural '
                                                                                                                               'flattening.html#diffusionaffinity.__init__',
                                                                                                                               'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.DiffusionAffinity.fit': ( 'library/flattening/mioflow '
                                                                                                                          'for neural '
                                                                                                                          'flattening.html#diffusionaffinity.fit',
                                                                                                                          'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.DiffusionDistance': ( 'library/flattening/mioflow '
                                                                                                                      'for neural '
                                                                                                                      'flattening.html#diffusiondistance',
                                                                                                                      'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.DiffusionDistance.__init__': ( 'library/flattening/mioflow '
                                                                                                                               'for neural '
                                                                                                                               'flattening.html#diffusiondistance.__init__',
                                                                                                                               'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.DiffusionDistance.compute_custom_diffusion_distance': ( 'library/flattening/mioflow '
                                                                                                                                                        'for '
                                                                                                                                                        'neural '
                                                                                                                                                        'flattening.html#diffusiondistance.compute_custom_diffusion_distance',
                                                                                                                                                        'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.DiffusionDistance.compute_stationnary_distrib': ( 'library/flattening/mioflow '
                                                                                                                                                  'for '
                                                                                                                                                  'neural '
                                                                                                                                                  'flattening.html#diffusiondistance.compute_stationnary_distrib',
                                                                                                                                                  'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.DiffusionDistance.fit': ( 'library/flattening/mioflow '
                                                                                                                          'for neural '
                                                                                                                          'flattening.html#diffusiondistance.fit',
                                                                                                                          'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.Local_density_loss': ( 'library/flattening/mioflow '
                                                                                                                       'for neural '
                                                                                                                       'flattening.html#local_density_loss',
                                                                                                                       'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.Local_density_loss.__call__': ( 'library/flattening/mioflow '
                                                                                                                                'for '
                                                                                                                                'neural '
                                                                                                                                'flattening.html#local_density_loss.__call__',
                                                                                                                                'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.Local_density_loss.__init__': ( 'library/flattening/mioflow '
                                                                                                                                'for '
                                                                                                                                'neural '
                                                                                                                                'flattening.html#local_density_loss.__init__',
                                                                                                                                'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.MMD_loss': ( 'library/flattening/mioflow '
                                                                                                             'for neural '
                                                                                                             'flattening.html#mmd_loss',
                                                                                                             'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.MMD_loss.__init__': ( 'library/flattening/mioflow '
                                                                                                                      'for neural '
                                                                                                                      'flattening.html#mmd_loss.__init__',
                                                                                                                      'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.MMD_loss.forward': ( 'library/flattening/mioflow '
                                                                                                                     'for neural '
                                                                                                                     'flattening.html#mmd_loss.forward',
                                                                                                                     'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.MMD_loss.guassian_kernel': ( 'library/flattening/mioflow '
                                                                                                                             'for neural '
                                                                                                                             'flattening.html#mmd_loss.guassian_kernel',
                                                                                                                             'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.MMD_loss_to_uniform': ( 'library/flattening/mioflow '
                                                                                                                        'for neural '
                                                                                                                        'flattening.html#mmd_loss_to_uniform',
                                                                                                                        'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.MMD_loss_to_uniform.__init__': ( 'library/flattening/mioflow '
                                                                                                                                 'for '
                                                                                                                                 'neural '
                                                                                                                                 'flattening.html#mmd_loss_to_uniform.__init__',
                                                                                                                                 'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.MMD_loss_to_uniform.forward': ( 'library/flattening/mioflow '
                                                                                                                                'for '
                                                                                                                                'neural '
                                                                                                                                'flattening.html#mmd_loss_to_uniform.forward',
                                                                                                                                'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.MMD_loss_to_uniform.gaussian_kernel': ( 'library/flattening/mioflow '
                                                                                                                                        'for '
                                                                                                                                        'neural '
                                                                                                                                        'flattening.html#mmd_loss_to_uniform.gaussian_kernel',
                                                                                                                                        'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.MMD_loss_to_uniform.uniformly_sampled_circle': ( 'library/flattening/mioflow '
                                                                                                                                                 'for '
                                                                                                                                                 'neural '
                                                                                                                                                 'flattening.html#mmd_loss_to_uniform.uniformly_sampled_circle',
                                                                                                                                                 'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.NeuralODE': ( 'library/flattening/mioflow '
                                                                                                              'for neural '
                                                                                                              'flattening.html#neuralode',
                                                                                                              'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.NeuralODE.__init__': ( 'library/flattening/mioflow '
                                                                                                                       'for neural '
                                                                                                                       'flattening.html#neuralode.__init__',
                                                                                                                       'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.NeuralODE.forward': ( 'library/flattening/mioflow '
                                                                                                                      'for neural '
                                                                                                                      'flattening.html#neuralode.forward',
                                                                                                                      'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ODEAdjoint': ( 'library/flattening/mioflow '
                                                                                                               'for neural '
                                                                                                               'flattening.html#odeadjoint',
                                                                                                               'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ODEAdjoint.backward': ( 'library/flattening/mioflow '
                                                                                                                        'for neural '
                                                                                                                        'flattening.html#odeadjoint.backward',
                                                                                                                        'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ODEAdjoint.forward': ( 'library/flattening/mioflow '
                                                                                                                       'for neural '
                                                                                                                       'flattening.html#odeadjoint.forward',
                                                                                                                       'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ODEF': ( 'library/flattening/mioflow for '
                                                                                                         'neural flattening.html#odef',
                                                                                                         'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ODEF.flatten_parameters': ( 'library/flattening/mioflow '
                                                                                                                            'for neural '
                                                                                                                            'flattening.html#odef.flatten_parameters',
                                                                                                                            'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ODEF.forward_with_grad': ( 'library/flattening/mioflow '
                                                                                                                           'for neural '
                                                                                                                           'flattening.html#odef.forward_with_grad',
                                                                                                                           'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.OT_loss': ( 'library/flattening/mioflow '
                                                                                                            'for neural '
                                                                                                            'flattening.html#ot_loss',
                                                                                                            'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.OT_loss.__call__': ( 'library/flattening/mioflow '
                                                                                                                     'for neural '
                                                                                                                     'flattening.html#ot_loss.__call__',
                                                                                                                     'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.OT_loss.__init__': ( 'library/flattening/mioflow '
                                                                                                                     'for neural '
                                                                                                                     'flattening.html#ot_loss.__init__',
                                                                                                                     'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ToyModel': ( 'library/flattening/mioflow '
                                                                                                             'for neural '
                                                                                                             'flattening.html#toymodel',
                                                                                                             'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ToyModel.__init__': ( 'library/flattening/mioflow '
                                                                                                                      'for neural '
                                                                                                                      'flattening.html#toymodel.__init__',
                                                                                                                      'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ToyModel.forward': ( 'library/flattening/mioflow '
                                                                                                                     'for neural '
                                                                                                                     'flattening.html#toymodel.forward',
                                                                                                                     'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ToyODE': ( 'library/flattening/mioflow for '
                                                                                                           'neural flattening.html#toyode',
                                                                                                           'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ToyODE.__init__': ( 'library/flattening/mioflow '
                                                                                                                    'for neural '
                                                                                                                    'flattening.html#toyode.__init__',
                                                                                                                    'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ToyODE.forward': ( 'library/flattening/mioflow '
                                                                                                                   'for neural '
                                                                                                                   'flattening.html#toyode.forward',
                                                                                                                   'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ToySDEModel': ( 'library/flattening/mioflow '
                                                                                                                'for neural '
                                                                                                                'flattening.html#toysdemodel',
                                                                                                                'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ToySDEModel.__init__': ( 'library/flattening/mioflow '
                                                                                                                         'for neural '
                                                                                                                         'flattening.html#toysdemodel.__init__',
                                                                                                                         'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ToySDEModel.f': ( 'library/flattening/mioflow '
                                                                                                                  'for neural '
                                                                                                                  'flattening.html#toysdemodel.f',
                                                                                                                  'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ToySDEModel.forward': ( 'library/flattening/mioflow '
                                                                                                                        'for neural '
                                                                                                                        'flattening.html#toysdemodel.forward',
                                                                                                                        'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ToySDEModel.g': ( 'library/flattening/mioflow '
                                                                                                                  'for neural '
                                                                                                                  'flattening.html#toysdemodel.g',
                                                                                                                  'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.UniformDensityLoss': ( 'library/flattening/mioflow '
                                                                                                                       'for neural '
                                                                                                                       'flattening.html#uniformdensityloss',
                                                                                                                       'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.UniformDensityLoss.__call__': ( 'library/flattening/mioflow '
                                                                                                                                'for '
                                                                                                                                'neural '
                                                                                                                                'flattening.html#uniformdensityloss.__call__',
                                                                                                                                'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.UniformDensityLoss.__init__': ( 'library/flattening/mioflow '
                                                                                                                                'for '
                                                                                                                                'neural '
                                                                                                                                'flattening.html#uniformdensityloss.__init__',
                                                                                                                                'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.config_criterion': ( 'library/flattening/mioflow '
                                                                                                                     'for neural '
                                                                                                                     'flattening.html#config_criterion',
                                                                                                                     'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.config_hold_out': ( 'library/flattening/mioflow '
                                                                                                                    'for neural '
                                                                                                                    'flattening.html#config_hold_out',
                                                                                                                    'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.construct_diamond': ( 'library/flattening/mioflow '
                                                                                                                      'for neural '
                                                                                                                      'flattening.html#construct_diamond',
                                                                                                                      'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.flatten_with_mioflow': ( 'library/flattening/mioflow '
                                                                                                                         'for neural '
                                                                                                                         'flattening.html#flatten_with_mioflow',
                                                                                                                         'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.generate_plot_data': ( 'library/flattening/mioflow '
                                                                                                                       'for neural '
                                                                                                                       'flattening.html#generate_plot_data',
                                                                                                                       'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.generate_plot_data_flat': ( 'library/flattening/mioflow '
                                                                                                                            'for neural '
                                                                                                                            'flattening.html#generate_plot_data_flat',
                                                                                                                            'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.generate_points': ( 'library/flattening/mioflow '
                                                                                                                    'for neural '
                                                                                                                    'flattening.html#generate_points',
                                                                                                                    'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.generate_points_flat': ( 'library/flattening/mioflow '
                                                                                                                         'for neural '
                                                                                                                         'flattening.html#generate_points_flat',
                                                                                                                         'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.generate_steps': ( 'library/flattening/mioflow '
                                                                                                                   'for neural '
                                                                                                                   'flattening.html#generate_steps',
                                                                                                                   'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.generate_trajectories': ( 'library/flattening/mioflow '
                                                                                                                          'for neural '
                                                                                                                          'flattening.html#generate_trajectories',
                                                                                                                          'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.generate_trajectories_flat': ( 'library/flattening/mioflow '
                                                                                                                               'for neural '
                                                                                                                               'flattening.html#generate_trajectories_flat',
                                                                                                                               'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.get_cell_types_from_df': ( 'library/flattening/mioflow '
                                                                                                                           'for neural '
                                                                                                                           'flattening.html#get_cell_types_from_df',
                                                                                                                           'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.get_groups_from_df': ( 'library/flattening/mioflow '
                                                                                                                       'for neural '
                                                                                                                       'flattening.html#get_groups_from_df',
                                                                                                                       'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.get_sample_n_from_df': ( 'library/flattening/mioflow '
                                                                                                                         'for neural '
                                                                                                                         'flattening.html#get_sample_n_from_df',
                                                                                                                         'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.get_times_from_groups': ( 'library/flattening/mioflow '
                                                                                                                          'for neural '
                                                                                                                          'flattening.html#get_times_from_groups',
                                                                                                                          'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.group_extract': ( 'library/flattening/mioflow '
                                                                                                                  'for neural '
                                                                                                                  'flattening.html#group_extract',
                                                                                                                  'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.make_diamonds': ( 'library/flattening/mioflow '
                                                                                                                  'for neural '
                                                                                                                  'flattening.html#make_diamonds',
                                                                                                                  'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.make_model': ( 'library/flattening/mioflow '
                                                                                                               'for neural '
                                                                                                               'flattening.html#make_model',
                                                                                                               'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.new_plot_comparisions': ( 'library/flattening/mioflow '
                                                                                                                          'for neural '
                                                                                                                          'flattening.html#new_plot_comparisions',
                                                                                                                          'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.new_plot_comparisons_flat': ( 'library/flattening/mioflow '
                                                                                                                              'for neural '
                                                                                                                              'flattening.html#new_plot_comparisons_flat',
                                                                                                                              'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.ode_solve': ( 'library/flattening/mioflow '
                                                                                                              'for neural '
                                                                                                              'flattening.html#ode_solve',
                                                                                                              'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.old_DiffusionDistance': ( 'library/flattening/mioflow '
                                                                                                                          'for neural '
                                                                                                                          'flattening.html#old_diffusiondistance',
                                                                                                                          'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.old_DiffusionDistance.__init__': ( 'library/flattening/mioflow '
                                                                                                                                   'for '
                                                                                                                                   'neural '
                                                                                                                                   'flattening.html#old_diffusiondistance.__init__',
                                                                                                                                   'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.old_DiffusionDistance.compute_custom_diffusion_distance': ( 'library/flattening/mioflow '
                                                                                                                                                            'for '
                                                                                                                                                            'neural '
                                                                                                                                                            'flattening.html#old_diffusiondistance.compute_custom_diffusion_distance',
                                                                                                                                                            'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.old_DiffusionDistance.compute_density_norm_matrix': ( 'library/flattening/mioflow '
                                                                                                                                                      'for '
                                                                                                                                                      'neural '
                                                                                                                                                      'flattening.html#old_diffusiondistance.compute_density_norm_matrix',
                                                                                                                                                      'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.old_DiffusionDistance.compute_diffusion_Matrix': ( 'library/flattening/mioflow '
                                                                                                                                                   'for '
                                                                                                                                                   'neural '
                                                                                                                                                   'flattening.html#old_diffusiondistance.compute_diffusion_matrix',
                                                                                                                                                   'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.old_DiffusionDistance.compute_stationnary_distrib': ( 'library/flattening/mioflow '
                                                                                                                                                      'for '
                                                                                                                                                      'neural '
                                                                                                                                                      'flattening.html#old_diffusiondistance.compute_stationnary_distrib',
                                                                                                                                                      'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.old_DiffusionDistance.distance_matrix_Pt': ( 'library/flattening/mioflow '
                                                                                                                                             'for '
                                                                                                                                             'neural '
                                                                                                                                             'flattening.html#old_diffusiondistance.distance_matrix_pt',
                                                                                                                                             'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.old_DiffusionDistance.fit': ( 'library/flattening/mioflow '
                                                                                                                              'for neural '
                                                                                                                              'flattening.html#old_diffusiondistance.fit',
                                                                                                                              'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.plot_comparision': ( 'library/flattening/mioflow '
                                                                                                                     'for neural '
                                                                                                                     'flattening.html#plot_comparision',
                                                                                                                     'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.plot_comparison_flat': ( 'library/flattening/mioflow '
                                                                                                                         'for neural '
                                                                                                                         'flattening.html#plot_comparison_flat',
                                                                                                                         'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.plot_losses': ( 'library/flattening/mioflow '
                                                                                                                'for neural '
                                                                                                                'flattening.html#plot_losses',
                                                                                                                'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.sample': ( 'library/flattening/mioflow for '
                                                                                                           'neural flattening.html#sample',
                                                                                                           'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.set_seeds': ( 'library/flattening/mioflow '
                                                                                                              'for neural '
                                                                                                              'flattening.html#set_seeds',
                                                                                                              'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.setup_distance': ( 'library/flattening/mioflow '
                                                                                                                   'for neural '
                                                                                                                   'flattening.html#setup_distance',
                                                                                                                   'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.to_np': ( 'library/flattening/mioflow for '
                                                                                                          'neural flattening.html#to_np',
                                                                                                          'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.train': ( 'library/flattening/mioflow for '
                                                                                                          'neural flattening.html#train',
                                                                                                          'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.train_ae': ( 'library/flattening/mioflow '
                                                                                                             'for neural '
                                                                                                             'flattening.html#train_ae',
                                                                                                             'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.train_neural_flattener': ( 'library/flattening/mioflow '
                                                                                                                           'for neural '
                                                                                                                           'flattening.html#train_neural_flattener',
                                                                                                                           'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.training_regimen': ( 'library/flattening/mioflow '
                                                                                                                     'for neural '
                                                                                                                     'flattening.html#training_regimen',
                                                                                                                     'diffusion_curvature/flattening/mioflow.py'),
                                                        'diffusion_curvature.flattening.mioflow.training_regimen_neural_flattener': ( 'library/flattening/mioflow '
                                                                                                                                      'for '
                                                                                                                                      'neural '
                                                                                                                                      'flattening.html#training_regimen_neural_flattener',
                                                                                                                                      'diffusion_curvature/flattening/mioflow.py')},
            'diffusion_curvature.flattening.mioflow_quicktrain': { 'diffusion_curvature.flattening.mioflow_quicktrain.MIOFlowStandard': ( 'library/flattening/mioflow '
                                                                                                                                          'standard '
                                                                                                                                          '- '
                                                                                                                                          'quicktrain.html#mioflowstandard',
                                                                                                                                          'diffusion_curvature/flattening/mioflow_quicktrain.py'),
                                                                   'diffusion_curvature.flattening.mioflow_quicktrain.MIOFlowStandard.__init__': ( 'library/flattening/mioflow '
                                                                                                                                                   'standard '
                                                                                                                                                   '- '
                                                                                                                                                   'quicktrain.html#mioflowstandard.__init__',
                                                                                                                                                   'diffusion_curvature/flattening/mioflow_quicktrain.py'),
                                                                   'diffusion_curvature.flattening.mioflow_quicktrain.MIOFlowStandard.fit_transform': ( 'library/flattening/mioflow '
                                                                                                                                                        'standard '
                                                                                                                                                        '- '
                                                                                                                                                        'quicktrain.html#mioflowstandard.fit_transform',
                                                                                                                                                        'diffusion_curvature/flattening/mioflow_quicktrain.py'),
                                                                   'diffusion_curvature.flattening.mioflow_quicktrain.MIOFlowStandard.setup_data': ( 'library/flattening/mioflow '
                                                                                                                                                     'standard '
                                                                                                                                                     '- '
                                                                                                                                                     'quicktrain.html#mioflowstandard.setup_data',
                                                                                                                                                     'diffusion_curvature/flattening/mioflow_quicktrain.py'),
                                                                   'diffusion_curvature.flattening.mioflow_quicktrain.MIOFlowStandard.train_autoencoder': ( 'library/flattening/mioflow '
                                                                                                                                                            'standard '
                                                                                                                                                            '- '
                                                                                                                                                            'quicktrain.html#mioflowstandard.train_autoencoder',
                                                                                                                                                            'diffusion_curvature/flattening/mioflow_quicktrain.py'),
                                                                   'diffusion_curvature.flattening.mioflow_quicktrain.MIOFlowStandard.train_ode': ( 'library/flattening/mioflow '
                                                                                                                                                    'standard '
                                                                                                                                                    '- '
                                                                                                                                                    'quicktrain.html#mioflowstandard.train_ode',
                                                                                                                                                    'diffusion_curvature/flattening/mioflow_quicktrain.py'),
                                                                   'diffusion_curvature.flattening.mioflow_quicktrain.MIOFlowStandard.training_gif': ( 'library/flattening/mioflow '
                                                                                                                                                       'standard '
                                                                                                                                                       '- '
                                                                                                                                                       'quicktrain.html#mioflowstandard.training_gif',
                                                                                                                                                       'diffusion_curvature/flattening/mioflow_quicktrain.py'),
                                                                   'diffusion_curvature.flattening.mioflow_quicktrain.MIOFlowStandard.transform': ( 'library/flattening/mioflow '
                                                                                                                                                    'standard '
                                                                                                                                                    '- '
                                                                                                                                                    'quicktrain.html#mioflowstandard.transform',
                                                                                                                                                    'diffusion_curvature/flattening/mioflow_quicktrain.py'),
                                                                   'diffusion_curvature.flattening.mioflow_quicktrain.MIOFlowStandard.visualize_autoencoder': ( 'library/flattening/mioflow '
                                                                                                                                                                'standard '
                                                                                                                                                                '- '
                                                                                                                                                                'quicktrain.html#mioflowstandard.visualize_autoencoder',
                                                                                                                                                                'diffusion_curvature/flattening/mioflow_quicktrain.py')},
            'diffusion_curvature.flattening.radial_ae': { 'diffusion_curvature.flattening.radial_ae.RadialDistancesDataset': ( 'library/flattening/radial '
                                                                                                                               'flattening '
                                                                                                                               'autoencoder.html#radialdistancesdataset',
                                                                                                                               'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialDistancesDataset.__getitem__': ( 'library/flattening/radial '
                                                                                                                                           'flattening '
                                                                                                                                           'autoencoder.html#radialdistancesdataset.__getitem__',
                                                                                                                                           'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialDistancesDataset.__init__': ( 'library/flattening/radial '
                                                                                                                                        'flattening '
                                                                                                                                        'autoencoder.html#radialdistancesdataset.__init__',
                                                                                                                                        'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialDistancesDataset.__len__': ( 'library/flattening/radial '
                                                                                                                                       'flattening '
                                                                                                                                       'autoencoder.html#radialdistancesdataset.__len__',
                                                                                                                                       'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder': ( 'library/flattening/radial '
                                                                                                                                    'flattening '
                                                                                                                                    'autoencoder.html#radialflatteningautoencoder',
                                                                                                                                    'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder.__init__': ( 'library/flattening/radial '
                                                                                                                                             'flattening '
                                                                                                                                             'autoencoder.html#radialflatteningautoencoder.__init__',
                                                                                                                                             'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder.affinity_loss': ( 'library/flattening/radial '
                                                                                                                                                  'flattening '
                                                                                                                                                  'autoencoder.html#radialflatteningautoencoder.affinity_loss',
                                                                                                                                                  'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder.configure_optimizers': ( 'library/flattening/radial '
                                                                                                                                                         'flattening '
                                                                                                                                                         'autoencoder.html#radialflatteningautoencoder.configure_optimizers',
                                                                                                                                                         'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder.distance_loss': ( 'library/flattening/radial '
                                                                                                                                                  'flattening '
                                                                                                                                                  'autoencoder.html#radialflatteningautoencoder.distance_loss',
                                                                                                                                                  'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder.encode': ( 'library/flattening/radial '
                                                                                                                                           'flattening '
                                                                                                                                           'autoencoder.html#radialflatteningautoencoder.encode',
                                                                                                                                           'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder.forward': ( 'library/flattening/radial '
                                                                                                                                            'flattening '
                                                                                                                                            'autoencoder.html#radialflatteningautoencoder.forward',
                                                                                                                                            'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder.immersion': ( 'library/flattening/radial '
                                                                                                                                              'flattening '
                                                                                                                                              'autoencoder.html#radialflatteningautoencoder.immersion',
                                                                                                                                              'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder.step': ( 'library/flattening/radial '
                                                                                                                                         'flattening '
                                                                                                                                         'autoencoder.html#radialflatteningautoencoder.step',
                                                                                                                                         'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder.test_step': ( 'library/flattening/radial '
                                                                                                                                              'flattening '
                                                                                                                                              'autoencoder.html#radialflatteningautoencoder.test_step',
                                                                                                                                              'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder.training_step': ( 'library/flattening/radial '
                                                                                                                                                  'flattening '
                                                                                                                                                  'autoencoder.html#radialflatteningautoencoder.training_step',
                                                                                                                                                  'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.RadialFlatteningAutoencoder.validation_step': ( 'library/flattening/radial '
                                                                                                                                                    'flattening '
                                                                                                                                                    'autoencoder.html#radialflatteningautoencoder.validation_step',
                                                                                                                                                    'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.dataloader_for_local_neighborhood_flattening': ( 'library/flattening/radial '
                                                                                                                                                     'flattening '
                                                                                                                                                     'autoencoder.html#dataloader_for_local_neighborhood_flattening',
                                                                                                                                                     'diffusion_curvature/flattening/radial_ae.py'),
                                                          'diffusion_curvature.flattening.radial_ae.radially_flatten_with_ae': ( 'library/flattening/radial '
                                                                                                                                 'flattening '
                                                                                                                                 'autoencoder.html#radially_flatten_with_ae',
                                                                                                                                 'diffusion_curvature/flattening/radial_ae.py')},
            'diffusion_curvature.graphs': { 'diffusion_curvature.graphs.diff_aff': ( 'library/core-jax/graphs.html#diff_aff',
                                                                                     'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.diff_op': ( 'library/core-jax/graphs.html#diff_op',
                                                                                    'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.diffusion_matrix_from_affinities': ( 'library/core-jax/graphs.html#diffusion_matrix_from_affinities',
                                                                                                             'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.generic_kernel': ( 'library/core-jax/graphs.html#generic_kernel',
                                                                                           'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.get_adaptive_graph': ( 'library/core-jax/graphs.html#get_adaptive_graph',
                                                                                               'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.get_alpha_decay_graph': ( 'library/core-jax/graphs.html#get_alpha_decay_graph',
                                                                                                  'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.get_knn_graph': ( 'library/core-jax/graphs.html#get_knn_graph',
                                                                                          'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.get_scanpy_graph': ( 'library/core-jax/graphs.html#get_scanpy_graph',
                                                                                             'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.get_umap_graph': ( 'library/core-jax/graphs.html#get_umap_graph',
                                                                                           'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.kernel_degree': ( 'library/core-jax/graphs.html#kernel_degree',
                                                                                          'diffusion_curvature/graphs.py')},
            'diffusion_curvature.heat_diffusion': { 'diffusion_curvature.heat_diffusion.E': ( 'library/core-jax/heat-diffusion.html#e',
                                                                                              'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.compute_chebychev_coeff_all': ( 'library/core-jax/heat-diffusion.html#compute_chebychev_coeff_all',
                                                                                                                        'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.expm_multiply': ( 'library/core-jax/heat-diffusion.html#expm_multiply',
                                                                                                          'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.g': ( 'library/core-jax/heat-diffusion.html#g',
                                                                                              'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.get_bound_bergamaschi_generic': ( 'library/core-jax/heat-diffusion.html#get_bound_bergamaschi_generic',
                                                                                                                          'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.get_bound_bergamaschi_specific': ( 'library/core-jax/heat-diffusion.html#get_bound_bergamaschi_specific',
                                                                                                                           'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.get_bound_eps_generic': ( 'library/core-jax/heat-diffusion.html#get_bound_eps_generic',
                                                                                                                  'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.get_bound_eta_generic': ( 'library/core-jax/heat-diffusion.html#get_bound_eta_generic',
                                                                                                                  'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.get_bound_eta_specific': ( 'library/core-jax/heat-diffusion.html#get_bound_eta_specific',
                                                                                                                   'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.heat_diffusion_from_dirac': ( 'library/core-jax/heat-diffusion.html#heat_diffusion_from_dirac',
                                                                                                                      'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.heat_diffusion_on_signal': ( 'library/core-jax/heat-diffusion.html#heat_diffusion_on_signal',
                                                                                                                     'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.jax_power_matrix': ( 'library/core-jax/heat-diffusion.html#jax_power_matrix',
                                                                                                             'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.kronecker_delta': ( 'library/core-jax/heat-diffusion.html#kronecker_delta',
                                                                                                            'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.reverse_bound': ( 'library/core-jax/heat-diffusion.html#reverse_bound',
                                                                                                          'diffusion_curvature/heat_diffusion.py')},
            'diffusion_curvature.heatkernel': { 'diffusion_curvature.heatkernel.E': ( 'library/core-jax/chebyshev-neumann.html#e',
                                                                                      'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.compute_chebychev_coeff_all': ( 'library/core-jax/chebyshev-neumann.html#compute_chebychev_coeff_all',
                                                                                                                'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.expm_multiply': ( 'library/core-jax/chebyshev-neumann.html#expm_multiply',
                                                                                                  'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.g': ( 'library/core-jax/chebyshev-neumann.html#g',
                                                                                      'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.get_bound_bergamaschi_generic': ( 'library/core-jax/chebyshev-neumann.html#get_bound_bergamaschi_generic',
                                                                                                                  'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.get_bound_bergamaschi_specific': ( 'library/core-jax/chebyshev-neumann.html#get_bound_bergamaschi_specific',
                                                                                                                   'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.get_bound_eps_generic': ( 'library/core-jax/chebyshev-neumann.html#get_bound_eps_generic',
                                                                                                          'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.get_bound_eta_generic': ( 'library/core-jax/chebyshev-neumann.html#get_bound_eta_generic',
                                                                                                          'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.get_bound_eta_specific': ( 'library/core-jax/chebyshev-neumann.html#get_bound_eta_specific',
                                                                                                           'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.heat_diffusion_on_signal': ( 'library/core-jax/chebyshev-neumann.html#heat_diffusion_on_signal',
                                                                                                             'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.kronecker_delta': ( 'library/core-jax/chebyshev-neumann.html#kronecker_delta',
                                                                                                    'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.reverse_bound': ( 'library/core-jax/chebyshev-neumann.html#reverse_bound',
                                                                                                  'diffusion_curvature/heatkernel.py')},
            'diffusion_curvature.kernels': { 'diffusion_curvature.kernels.compute_anisotropic_affinities_from_graph': ( 'library/core-jax/kernels.html#compute_anisotropic_affinities_from_graph',
                                                                                                                        'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.compute_anisotropic_diffusion_matrix_from_graph': ( 'library/core-jax/kernels.html#compute_anisotropic_diffusion_matrix_from_graph',
                                                                                                                              'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.diffusion_matrix': ( 'library/core-jax/kernels.html#diffusion_matrix',
                                                                                               'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.gaussian_kernel': ( 'library/core-jax/kernels.html#gaussian_kernel',
                                                                                              'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.get_adaptive_graph': ( 'library/core-jax/kernels.html#get_adaptive_graph',
                                                                                                 'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.get_curvature_agnostic_graph': ( 'library/core-jax/kernels.html#get_curvature_agnostic_graph',
                                                                                                           'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.get_fixed_graph': ( 'library/core-jax/kernels.html#get_fixed_graph',
                                                                                              'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.get_knn_graph': ( 'library/core-jax/kernels.html#get_knn_graph',
                                                                                            'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.median_heuristic': ( 'library/core-jax/kernels.html#median_heuristic',
                                                                                               'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.pygsp_graph_from_points': ( 'library/core-jax/kernels.html#pygsp_graph_from_points',
                                                                                                      'diffusion_curvature/kernels.py')},
            'diffusion_curvature.normalizing_flows': { 'diffusion_curvature.normalizing_flows.FlowNet': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#flownet',
                                                                                                          'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.FlowNet.__init__': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#flownet.__init__',
                                                                                                                   'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.FlowNet.forward': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#flownet.forward',
                                                                                                                  'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#greatflattener',
                                                                                                                 'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.__init__': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#greatflattener.__init__',
                                                                                                                          'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.configure_optimizers': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#greatflattener.configure_optimizers',
                                                                                                                                      'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.forward': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#greatflattener.forward',
                                                                                                                         'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.generate_data': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#greatflattener.generate_data',
                                                                                                                               'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.sample': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#greatflattener.sample',
                                                                                                                        'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.training_step': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#greatflattener.training_step',
                                                                                                                               'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.ManifoldNeighborhoodDataset': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#manifoldneighborhooddataset',
                                                                                                                              'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.ManifoldNeighborhoodDataset.__getitem__': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#manifoldneighborhooddataset.__getitem__',
                                                                                                                                          'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.ManifoldNeighborhoodDataset.__init__': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#manifoldneighborhooddataset.__init__',
                                                                                                                                       'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.ManifoldNeighborhoodDataset.__len__': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#manifoldneighborhooddataset.__len__',
                                                                                                                                      'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihood': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#negativeloglikelihood',
                                                                                                                        'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihood.__call__': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#negativeloglikelihood.__call__',
                                                                                                                                 'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihood.__init__': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#negativeloglikelihood.__init__',
                                                                                                                                 'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihoodQuaUniform': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#negativeloglikelihoodquauniform',
                                                                                                                                  'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihoodQuaUniform.__call__': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#negativeloglikelihoodquauniform.__call__',
                                                                                                                                           'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihoodQuaUniform.__init__': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#negativeloglikelihoodquauniform.__init__',
                                                                                                                                           'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.dataloader_from_manifold_neighborhoods': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#dataloader_from_manifold_neighborhoods',
                                                                                                                                         'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.neural_flattener': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#neural_flattener',
                                                                                                                   'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.neural_flattener.__init__': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#neural_flattener.__init__',
                                                                                                                            'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.neural_flattener.fit_transform': ( 'experiments/3e3-flattening-with-continuous-normalizing-flows.html#neural_flattener.fit_transform',
                                                                                                                                 'diffusion_curvature/normalizing_flows.py')},
            'diffusion_curvature.pyg.diffusion': { 'diffusion_curvature.pyg.diffusion.Diffuse': ( 'library/core-pyg/1a-graph-diffusion-pyg.html#diffuse',
                                                                                                  'diffusion_curvature/pyg/diffusion.py'),
                                                   'diffusion_curvature.pyg.diffusion.Diffuse.__init__': ( 'library/core-pyg/1a-graph-diffusion-pyg.html#diffuse.__init__',
                                                                                                           'diffusion_curvature/pyg/diffusion.py'),
                                                   'diffusion_curvature.pyg.diffusion.Diffuse.forward': ( 'library/core-pyg/1a-graph-diffusion-pyg.html#diffuse.forward',
                                                                                                          'diffusion_curvature/pyg/diffusion.py'),
                                                   'diffusion_curvature.pyg.diffusion.Diffuse.message': ( 'library/core-pyg/1a-graph-diffusion-pyg.html#diffuse.message',
                                                                                                          'diffusion_curvature/pyg/diffusion.py'),
                                                   'diffusion_curvature.pyg.diffusion.Diffuse.message_and_aggregate': ( 'library/core-pyg/1a-graph-diffusion-pyg.html#diffuse.message_and_aggregate',
                                                                                                                        'diffusion_curvature/pyg/diffusion.py'),
                                                   'diffusion_curvature.pyg.diffusion.Diffuse.update': ( 'library/core-pyg/1a-graph-diffusion-pyg.html#diffuse.update',
                                                                                                         'diffusion_curvature/pyg/diffusion.py'),
                                                   'diffusion_curvature.pyg.diffusion.LazyLayer': ( 'library/core-pyg/1a-graph-diffusion-pyg.html#lazylayer',
                                                                                                    'diffusion_curvature/pyg/diffusion.py'),
                                                   'diffusion_curvature.pyg.diffusion.LazyLayer.__init__': ( 'library/core-pyg/1a-graph-diffusion-pyg.html#lazylayer.__init__',
                                                                                                             'diffusion_curvature/pyg/diffusion.py'),
                                                   'diffusion_curvature.pyg.diffusion.LazyLayer.forward': ( 'library/core-pyg/1a-graph-diffusion-pyg.html#lazylayer.forward',
                                                                                                            'diffusion_curvature/pyg/diffusion.py'),
                                                   'diffusion_curvature.pyg.diffusion.LazyLayer.reset_parameters': ( 'library/core-pyg/1a-graph-diffusion-pyg.html#lazylayer.reset_parameters',
                                                                                                                     'diffusion_curvature/pyg/diffusion.py'),
                                                   'diffusion_curvature.pyg.diffusion.gcn_norm': ( 'library/core-pyg/1a-graph-diffusion-pyg.html#gcn_norm',
                                                                                                   'diffusion_curvature/pyg/diffusion.py')},
            'diffusion_curvature.random_surfaces': { 'diffusion_curvature.random_surfaces.manifold_density': ( 'library/datasets/random-surfaces.html#manifold_density',
                                                                                                               'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.max_value': ( 'library/datasets/random-surfaces.html#max_value',
                                                                                                        'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.random_polynomial': ( 'library/datasets/random-surfaces.html#random_polynomial',
                                                                                                                'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.random_surface': ( 'library/datasets/random-surfaces.html#random_surface',
                                                                                                             'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.rejection_sample_from_surface': ( 'library/datasets/random-surfaces.html#rejection_sample_from_surface',
                                                                                                                            'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.riemannian_curvature_tensor': ( 'library/datasets/random-surfaces.html#riemannian_curvature_tensor',
                                                                                                                          'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.samples_from_random_surface': ( 'library/datasets/random-surfaces.html#samples_from_random_surface',
                                                                                                                          'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.scalar_curvature_at_origin': ( 'library/datasets/random-surfaces.html#scalar_curvature_at_origin',
                                                                                                                         'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.second_fundamental_form': ( 'library/datasets/random-surfaces.html#second_fundamental_form',
                                                                                                                      'diffusion_curvature/random_surfaces.py')},
            'diffusion_curvature.ricci': { 'diffusion_curvature.ricci.DiffusionRicciCurvature': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature',
                                                                                                  'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.DiffusionRicciCurvature.__init__': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature.__init__',
                                                                                                           'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.DiffusionRicciCurvature.differential_diffusion_curvature_of_edge': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature.differential_diffusion_curvature_of_edge',
                                                                                                                                           'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.DiffusionRicciCurvature.diffusion_laziness_of_edge': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature.diffusion_laziness_of_edge',
                                                                                                                             'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.DiffusionRicciCurvature.diffusion_laziness_of_edge_with_surgery': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature.diffusion_laziness_of_edge_with_surgery',
                                                                                                                                          'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.DiffusionRicciCurvature.diffusion_laziness_of_graph': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature.diffusion_laziness_of_graph',
                                                                                                                              'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.DiffusionRicciCurvature.diffusion_laziness_of_idx': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature.diffusion_laziness_of_idx',
                                                                                                                            'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.DiffusionRicciCurvature.edge_surgery': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature.edge_surgery',
                                                                                                               'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.DiffusionRicciCurvature.fit': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature.fit',
                                                                                                      'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.DiffusionRicciCurvature.fit_transform': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature.fit_transform',
                                                                                                                'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.DiffusionRicciCurvature.ricci_curvature': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature.ricci_curvature',
                                                                                                                  'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.DiffusionRicciCurvature.scalar_curvature': ( 'library/core-jax/ricci-curvature.html#diffusionriccicurvature.scalar_curvature',
                                                                                                                   'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.dirichlet_energy': ( 'library/core-jax/ricci-curvature.html#dirichlet_energy',
                                                                                           'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.jax_repeatedly_diffuse_dirac': ( 'library/core-jax/ricci-curvature.html#jax_repeatedly_diffuse_dirac',
                                                                                                       'diffusion_curvature/ricci.py'),
                                           'diffusion_curvature.ricci.stable_entropy_of_diffusion': ( 'library/core-jax/ricci-curvature.html#stable_entropy_of_diffusion',
                                                                                                      'diffusion_curvature/ricci.py')},
            'diffusion_curvature.sadspheres': { 'diffusion_curvature.sadspheres.SadSpheres': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres',
                                                                                               'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.__init__': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.__init__',
                                                                                                        'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.__iter__': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.__iter__',
                                                                                                        'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.__len__': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.__len__',
                                                                                                       'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.__next__': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.__next__',
                                                                                                        'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres._aggregate_labels': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres._aggregate_labels',
                                                                                                                 'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres._get_metrics': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres._get_metrics',
                                                                                                            'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.compute': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.compute',
                                                                                                       'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.compute_metrics': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.compute_metrics',
                                                                                                               'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.get_item': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.get_item',
                                                                                                        'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.get_truth': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.get_truth',
                                                                                                         'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.pearson_r': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.pearson_r',
                                                                                                         'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.plot': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.plot',
                                                                                                    'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.plot_by_dimension': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.plot_by_dimension',
                                                                                                                 'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.sign_score': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.sign_score',
                                                                                                          'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.table': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.table',
                                                                                                     'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.SadSpheres.update': ( 'library/datasets/saddle-sphere-ablations.html#sadspheres.update',
                                                                                                      'diffusion_curvature/sadspheres.py'),
                                                'diffusion_curvature.sadspheres.metric': ( 'library/datasets/saddle-sphere-ablations.html#metric',
                                                                                           'diffusion_curvature/sadspheres.py')},
            'diffusion_curvature.sampling_distance': { 'diffusion_curvature.sampling_distance.sampling_distance': ( 'library/benchmarking/sampling-distance.html#sampling_distance',
                                                                                                                    'diffusion_curvature/sampling_distance.py')},
            'diffusion_curvature.self_evaluating_dataset': {},
            'diffusion_curvature.self_evaluating_datasets': { 'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset',
                                                                                                                                      'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.__init__': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.__init__',
                                                                                                                                               'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.__iter__': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.__iter__',
                                                                                                                                               'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.__len__': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.__len__',
                                                                                                                                              'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.__next__': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.__next__',
                                                                                                                                               'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset._aggregate_labels': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset._aggregate_labels',
                                                                                                                                                        'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset._get_metrics': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset._get_metrics',
                                                                                                                                                   'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset._store_truth': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset._store_truth',
                                                                                                                                                   'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.compute': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.compute',
                                                                                                                                              'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.compute_metrics': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.compute_metrics',
                                                                                                                                                      'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.get_item': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.get_item',
                                                                                                                                               'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.get_truth': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.get_truth',
                                                                                                                                                'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.plot': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.plot',
                                                                                                                                           'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.preprocess': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.preprocess',
                                                                                                                                                 'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.table': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.table',
                                                                                                                                            'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.SelfEvaluatingDataset.update': ( 'library/datasets/self-evaluating-datasets.html#selfevaluatingdataset.update',
                                                                                                                                             'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.Wrapper': ( 'library/datasets/self-evaluating-datasets.html#wrapper',
                                                                                                                        'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.Wrapper.__init__': ( 'library/datasets/self-evaluating-datasets.html#wrapper.__init__',
                                                                                                                                 'diffusion_curvature/self_evaluating_datasets.py'),
                                                              'diffusion_curvature.self_evaluating_datasets.metric': ( 'library/datasets/self-evaluating-datasets.html#metric',
                                                                                                                       'diffusion_curvature/self_evaluating_datasets.py')},
            'diffusion_curvature.utils': { 'diffusion_curvature.utils.kronecker_delta': ( 'library/utils.html#kronecker_delta',
                                                                                          'diffusion_curvature/utils.py'),
                                           'diffusion_curvature.utils.perform_trials': ( 'library/utils.html#perform_trials',
                                                                                         'diffusion_curvature/utils.py'),
                                           'diffusion_curvature.utils.plot_3d': ( 'library/utils.html#plot_3d',
                                                                                  'diffusion_curvature/utils.py'),
                                           'diffusion_curvature.utils.plot_array': ( 'library/utils.html#plot_array',
                                                                                     'diffusion_curvature/utils.py'),
                                           'diffusion_curvature.utils.printnum': ( 'library/utils.html#printnum',
                                                                                   'diffusion_curvature/utils.py'),
                                           'diffusion_curvature.utils.random_jnparray': ( 'library/utils.html#random_jnparray',
                                                                                          'diffusion_curvature/utils.py'),
                                           'diffusion_curvature.utils.visualize_embedding': ( 'library/utils.html#visualize_embedding',
                                                                                              'diffusion_curvature/utils.py')},
            'diffusion_curvature.vne': { 'diffusion_curvature.vne.compute_von_neumann_entropy': ( 'library/diffusion-entropy.html#compute_von_neumann_entropy',
                                                                                                  'diffusion_curvature/vne.py'),
                                         'diffusion_curvature.vne.find_knee_point': ( 'library/diffusion-entropy.html#find_knee_point',
                                                                                      'diffusion_curvature/vne.py'),
                                         'diffusion_curvature.vne.optimal_t_via_vne': ( 'library/diffusion-entropy.html#optimal_t_via_vne',
                                                                                        'diffusion_curvature/vne.py')}}}
