# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/diffusion_curvature',
                'doc_host': 'https://professorwug.github.io',
                'git_url': 'https://github.com/professorwug/diffusion_curvature',
                'lib_path': 'src/diffusion_curvature'},
  'syms': { 'diffusion_curvature.clustering': { 'diffusion_curvature.clustering.enhanced_spectral_clustering': ( 'library/curvature.html#enhanced_spectral_clustering',
                                                                                                                 'diffusion_curvature/clustering.py')},
            'diffusion_curvature.comparison_space': { 'diffusion_curvature.comparison_space.EuclideanComparisonSpace': ( 'library/comparison.html#euclideancomparisonspace',
                                                                                                                         'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.EuclideanComparisonSpace.__call__': ( 'library/comparison.html#__call__',
                                                                                                                                  'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.EuclideanComparisonSpace.setup': ( 'library/comparison.html#setup',
                                                                                                                               'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.construct_ndgrid': ( 'library/comparison.html#construct_ndgrid',
                                                                                                                 'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.construct_ndgrid_from_shape': ( 'library/comparison.html#construct_ndgrid_from_shape',
                                                                                                                            'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.diffusion_coordinates': ( 'library/comparison.html#diffusion_coordinates',
                                                                                                                      'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.euclidean_comparison_graph': ( 'library/comparison.html#euclidean_comparison_graph',
                                                                                                                           'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.fit_comparison_space_model': ( 'library/comparison.html#fit_comparison_space_model',
                                                                                                                           'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.get_graph_type': ( 'library/comparison.html#get_graph_type',
                                                                                                               'diffusion_curvature/comparison_space.py'),
                                                      'diffusion_curvature.comparison_space.load_average_entropies': ( 'library/comparison.html#load_average_entropies',
                                                                                                                       'diffusion_curvature/comparison_space.py')},
            'diffusion_curvature.compute_diffusion_curvature_of_battery': { 'diffusion_curvature.compute_diffusion_curvature_of_battery.compute_correlations': ( 'experiments/3a1a.html#compute_correlations',
                                                                                                                                                                 'diffusion_curvature/compute_diffusion_curvature_of_battery.py'),
                                                                            'diffusion_curvature.compute_diffusion_curvature_of_battery.compute_curvature_on_battery': ( 'experiments/3a1a.html#compute_curvature_on_battery',
                                                                                                                                                                         'diffusion_curvature/compute_diffusion_curvature_of_battery.py'),
                                                                            'diffusion_curvature.compute_diffusion_curvature_of_battery.compute_sign_score': ( 'experiments/3a1a.html#compute_sign_score',
                                                                                                                                                               'diffusion_curvature/compute_diffusion_curvature_of_battery.py'),
                                                                            'diffusion_curvature.compute_diffusion_curvature_of_battery.result_table': ( 'experiments/3a1a.html#result_table',
                                                                                                                                                         'diffusion_curvature/compute_diffusion_curvature_of_battery.py')},
            'diffusion_curvature.compute_mean_flat_entropies': { 'diffusion_curvature.compute_mean_flat_entropies.average_flat_entropies': ( 'library/mean.html#average_flat_entropies',
                                                                                                                                             'diffusion_curvature/compute_mean_flat_entropies.py'),
                                                                 'diffusion_curvature.compute_mean_flat_entropies.create_mean_entropy_database': ( 'library/mean.html#create_mean_entropy_database',
                                                                                                                                                   'diffusion_curvature/compute_mean_flat_entropies.py'),
                                                                 'diffusion_curvature.compute_mean_flat_entropies.load_average_entropies': ( 'library/mean.html#load_average_entropies',
                                                                                                                                             'diffusion_curvature/compute_mean_flat_entropies.py')},
            'diffusion_curvature.construct_battery': { 'diffusion_curvature.construct_battery.create_battery': ( 'library/construct.html#create_battery',
                                                                                                                 'diffusion_curvature/construct_battery.py'),
                                                       'diffusion_curvature.construct_battery.main': ( 'library/construct.html#main',
                                                                                                       'diffusion_curvature/construct_battery.py')},
            'diffusion_curvature.core': { 'diffusion_curvature.core.DiffusionCurvature': ( 'library/core.html#diffusioncurvature',
                                                                                           'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.DiffusionCurvature.__init__': ( 'library/core.html#__init__',
                                                                                                    'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.DiffusionCurvature.curvature': ( 'library/core.html#curvature',
                                                                                                     'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.DiffusionCurvature.unsigned_curvature': ( 'library/core.html#unsigned_curvature',
                                                                                                              'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.SimpleGraph': ( 'library/core.html#simplegraph',
                                                                                    'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.fill_diagonal': ( 'library/core.html#fill_diagonal',
                                                                                      'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.get_adaptive_graph': ( 'library/core.html#get_adaptive_graph',
                                                                                           'diffusion_curvature/core.py'),
                                          'diffusion_curvature.core.graphtools_graph_from_data': ( 'library/core.html#graphtools_graph_from_data',
                                                                                                   'diffusion_curvature/core.py')},
            'diffusion_curvature.datasets': { 'diffusion_curvature.datasets.ellipsoid': ( 'library/datasets.html#ellipsoid',
                                                                                          'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.hyperboloid': ( 'library/datasets.html#hyperboloid',
                                                                                            'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.paraboloid': ( 'library/datasets.html#paraboloid',
                                                                                           'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.plane': ( 'library/datasets.html#plane',
                                                                                      'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.rejection_sample_for_ellipsoid': ( 'library/datasets.html#rejection_sample_for_ellipsoid',
                                                                                                               'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.rejection_sample_for_hyperboloid': ( 'library/datasets.html#rejection_sample_for_hyperboloid',
                                                                                                                 'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.rejection_sample_for_saddle': ( 'library/datasets.html#rejection_sample_for_saddle',
                                                                                                            'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.rejection_sample_for_torus': ( 'library/datasets.html#rejection_sample_for_torus',
                                                                                                           'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.rejection_sample_from_saddle': ( 'library/datasets.html#rejection_sample_from_saddle',
                                                                                                             'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.sphere': ( 'library/datasets.html#sphere',
                                                                                       'diffusion_curvature/datasets.py'),
                                              'diffusion_curvature.datasets.torus': ( 'library/datasets.html#torus',
                                                                                      'diffusion_curvature/datasets.py')},
            'diffusion_curvature.diffusion_laziness': { 'diffusion_curvature.diffusion_laziness.entropy_of_diffusion': ( 'library/diffusion.html#entropy_of_diffusion',
                                                                                                                         'diffusion_curvature/diffusion_laziness.py'),
                                                        'diffusion_curvature.diffusion_laziness.wasserstein_spread_of_diffusion': ( 'library/diffusion.html#wasserstein_spread_of_diffusion',
                                                                                                                                    'diffusion_curvature/diffusion_laziness.py')},
            'diffusion_curvature.distances': { 'diffusion_curvature.distances.pairwise_euclidean': ( 'library/manifold.html#pairwise_euclidean',
                                                                                                     'diffusion_curvature/distances.py'),
                                               'diffusion_curvature.distances.phate_distances': ( 'library/manifold.html#phate_distances',
                                                                                                  'diffusion_curvature/distances.py'),
                                               'diffusion_curvature.distances.phate_distances_differentiable': ( 'library/manifold.html#phate_distances_differentiable',
                                                                                                                 'diffusion_curvature/distances.py')},
            'diffusion_curvature.graphs': { 'diffusion_curvature.graphs.diff_aff': ( 'library/graphs.html#diff_aff',
                                                                                     'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.diff_op': ( 'library/graphs.html#diff_op',
                                                                                    'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.diffusion_matrix_from_affinities': ( 'library/graphs.html#diffusion_matrix_from_affinities',
                                                                                                             'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.generic_kernel': ( 'library/graphs.html#generic_kernel',
                                                                                           'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.get_alpha_decay_graph': ( 'library/graphs.html#get_alpha_decay_graph',
                                                                                                  'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.get_knn_graph': ( 'library/graphs.html#get_knn_graph',
                                                                                          'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.get_scanpy_graph': ( 'library/graphs.html#get_scanpy_graph',
                                                                                             'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.get_umap_graph': ( 'library/graphs.html#get_umap_graph',
                                                                                           'diffusion_curvature/graphs.py'),
                                            'diffusion_curvature.graphs.kernel_degree': ( 'library/graphs.html#kernel_degree',
                                                                                          'diffusion_curvature/graphs.py')},
            'diffusion_curvature.heat_diffusion': { 'diffusion_curvature.heat_diffusion.E': ( 'library/heat.html#e',
                                                                                              'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.compute_chebychev_coeff_all': ( 'library/heat.html#compute_chebychev_coeff_all',
                                                                                                                        'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.expm_multiply': ( 'library/heat.html#expm_multiply',
                                                                                                          'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.g': ( 'library/heat.html#g',
                                                                                              'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.get_bound_bergamaschi_generic': ( 'library/heat.html#get_bound_bergamaschi_generic',
                                                                                                                          'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.get_bound_bergamaschi_specific': ( 'library/heat.html#get_bound_bergamaschi_specific',
                                                                                                                           'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.get_bound_eps_generic': ( 'library/heat.html#get_bound_eps_generic',
                                                                                                                  'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.get_bound_eta_generic': ( 'library/heat.html#get_bound_eta_generic',
                                                                                                                  'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.get_bound_eta_specific': ( 'library/heat.html#get_bound_eta_specific',
                                                                                                                   'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.heat_diffusion_from_dirac': ( 'library/heat.html#heat_diffusion_from_dirac',
                                                                                                                      'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.heat_diffusion_on_signal': ( 'library/heat.html#heat_diffusion_on_signal',
                                                                                                                     'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.jax_power_matrix': ( 'library/heat.html#jax_power_matrix',
                                                                                                             'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.kronecker_delta': ( 'library/heat.html#kronecker_delta',
                                                                                                            'diffusion_curvature/heat_diffusion.py'),
                                                    'diffusion_curvature.heat_diffusion.reverse_bound': ( 'library/heat.html#reverse_bound',
                                                                                                          'diffusion_curvature/heat_diffusion.py')},
            'diffusion_curvature.heatkernel': { 'diffusion_curvature.heatkernel.E': ( 'experiments/neumann.html#e',
                                                                                      'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.compute_chebychev_coeff_all': ( 'experiments/neumann.html#compute_chebychev_coeff_all',
                                                                                                                'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.expm_multiply': ( 'experiments/neumann.html#expm_multiply',
                                                                                                  'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.g': ( 'experiments/neumann.html#g',
                                                                                      'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.get_bound_bergamaschi_generic': ( 'experiments/neumann.html#get_bound_bergamaschi_generic',
                                                                                                                  'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.get_bound_bergamaschi_specific': ( 'experiments/neumann.html#get_bound_bergamaschi_specific',
                                                                                                                   'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.get_bound_eps_generic': ( 'experiments/neumann.html#get_bound_eps_generic',
                                                                                                          'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.get_bound_eta_generic': ( 'experiments/neumann.html#get_bound_eta_generic',
                                                                                                          'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.get_bound_eta_specific': ( 'experiments/neumann.html#get_bound_eta_specific',
                                                                                                           'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.heat_diffusion_on_signal': ( 'experiments/neumann.html#heat_diffusion_on_signal',
                                                                                                             'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.kronecker_delta': ( 'experiments/neumann.html#kronecker_delta',
                                                                                                    'diffusion_curvature/heatkernel.py'),
                                                'diffusion_curvature.heatkernel.reverse_bound': ( 'experiments/neumann.html#reverse_bound',
                                                                                                  'diffusion_curvature/heatkernel.py')},
            'diffusion_curvature.hickok': { 'diffusion_curvature.hickok.KDE': ('experiments/3b.html#kde', 'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.KDE.__call__': ( 'experiments/3b.html#__call__',
                                                                                         'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.KDE.__init__': ( 'experiments/3b.html#__init__',
                                                                                         'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.KDE.bandwidth': ( 'experiments/3b.html#bandwidth',
                                                                                          'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.KDE.biweight': ( 'experiments/3b.html#biweight',
                                                                                         'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.KDE.density': ( 'experiments/3b.html#density',
                                                                                        'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.KDE.epanechnikov': ( 'experiments/3b.html#epanechnikov',
                                                                                             'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.KDE.gauss': ( 'experiments/3b.html#gauss',
                                                                                      'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.KDE.triweight': ( 'experiments/3b.html#triweight',
                                                                                          'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est': ( 'experiments/3b.html#scalar_curvature_est',
                                                                                                 'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est.__init__': ( 'experiments/3b.html#__init__',
                                                                                                          'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est.ball_ratios': ( 'experiments/3b.html#ball_ratios',
                                                                                                             'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est.ball_volumes': ( 'experiments/3b.html#ball_volumes',
                                                                                                              'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est.compute_Rdist': ( 'experiments/3b.html#compute_rdist',
                                                                                                               'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est.compute_density': ( 'experiments/3b.html#compute_density',
                                                                                                                 'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est.compute_nbr_matrices': ( 'experiments/3b.html#compute_nbr_matrices',
                                                                                                                      'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est.estimate': ( 'experiments/3b.html#estimate',
                                                                                                          'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est.fit_quad_coeff': ( 'experiments/3b.html#fit_quad_coeff',
                                                                                                                'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est.get_Rdist': ( 'experiments/3b.html#get_rdist',
                                                                                                           'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est.get_density': ( 'experiments/3b.html#get_density',
                                                                                                             'diffusion_curvature/hickok.py'),
                                            'diffusion_curvature.hickok.scalar_curvature_est.nbr_distances': ( 'experiments/3b.html#nbr_distances',
                                                                                                               'diffusion_curvature/hickok.py')},
            'diffusion_curvature.kernels': { 'diffusion_curvature.kernels.compute_anisotropic_affinities_from_graph': ( 'library/kernels.html#compute_anisotropic_affinities_from_graph',
                                                                                                                        'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.compute_anisotropic_diffusion_matrix_from_graph': ( 'library/kernels.html#compute_anisotropic_diffusion_matrix_from_graph',
                                                                                                                              'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.diffusion_matrix': ( 'library/kernels.html#diffusion_matrix',
                                                                                               'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.gaussian_kernel': ( 'library/kernels.html#gaussian_kernel',
                                                                                              'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.knn_graph': ( 'library/kernels.html#knn_graph',
                                                                                        'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.median_heuristic': ( 'library/kernels.html#median_heuristic',
                                                                                               'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.plot_3d': ( 'library/kernels.html#plot_3d',
                                                                                      'diffusion_curvature/kernels.py'),
                                             'diffusion_curvature.kernels.pygsp_graph_from_points': ( 'library/kernels.html#pygsp_graph_from_points',
                                                                                                      'diffusion_curvature/kernels.py')},
            'diffusion_curvature.laziness': { 'diffusion_curvature.laziness.entropy_of_diffusion': ( 'experiments/diffusion.html#entropy_of_diffusion',
                                                                                                     'diffusion_curvature/laziness.py')},
            'diffusion_curvature.normalizing_flows': { 'diffusion_curvature.normalizing_flows.FlowNet': ( 'library/continuous_normalizing_flows.html#flownet',
                                                                                                          'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.FlowNet.__init__': ( 'library/continuous_normalizing_flows.html#__init__',
                                                                                                                   'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.FlowNet.forward': ( 'library/continuous_normalizing_flows.html#forward',
                                                                                                                  'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener': ( 'library/continuous_normalizing_flows.html#greatflattener',
                                                                                                                 'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.__init__': ( 'library/continuous_normalizing_flows.html#__init__',
                                                                                                                          'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.configure_optimizers': ( 'library/continuous_normalizing_flows.html#configure_optimizers',
                                                                                                                                      'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.forward': ( 'library/continuous_normalizing_flows.html#forward',
                                                                                                                         'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.generate_data': ( 'library/continuous_normalizing_flows.html#generate_data',
                                                                                                                               'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.sample': ( 'library/continuous_normalizing_flows.html#sample',
                                                                                                                        'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.GreatFlattener.training_step': ( 'library/continuous_normalizing_flows.html#training_step',
                                                                                                                               'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.ManifoldNeighborhoodDataset': ( 'library/continuous_normalizing_flows.html#manifoldneighborhooddataset',
                                                                                                                              'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.ManifoldNeighborhoodDataset.__getitem__': ( 'library/continuous_normalizing_flows.html#__getitem__',
                                                                                                                                          'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.ManifoldNeighborhoodDataset.__init__': ( 'library/continuous_normalizing_flows.html#__init__',
                                                                                                                                       'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.ManifoldNeighborhoodDataset.__len__': ( 'library/continuous_normalizing_flows.html#__len__',
                                                                                                                                      'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihood': ( 'library/continuous_normalizing_flows.html#negativeloglikelihood',
                                                                                                                        'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihood.__call__': ( 'library/continuous_normalizing_flows.html#__call__',
                                                                                                                                 'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihood.__init__': ( 'library/continuous_normalizing_flows.html#__init__',
                                                                                                                                 'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihoodQuaUniform': ( 'library/continuous_normalizing_flows.html#negativeloglikelihoodquauniform',
                                                                                                                                  'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihoodQuaUniform.__call__': ( 'library/continuous_normalizing_flows.html#__call__',
                                                                                                                                           'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.NegativeLogLikelihoodQuaUniform.__init__': ( 'library/continuous_normalizing_flows.html#__init__',
                                                                                                                                           'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.dataloader_from_manifold_neighborhoods': ( 'library/continuous_normalizing_flows.html#dataloader_from_manifold_neighborhoods',
                                                                                                                                         'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.neural_flattener': ( 'library/continuous_normalizing_flows.html#neural_flattener',
                                                                                                                   'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.neural_flattener.__init__': ( 'library/continuous_normalizing_flows.html#__init__',
                                                                                                                            'diffusion_curvature/normalizing_flows.py'),
                                                       'diffusion_curvature.normalizing_flows.neural_flattener.fit_transform': ( 'library/continuous_normalizing_flows.html#fit_transform',
                                                                                                                                 'diffusion_curvature/normalizing_flows.py')},
            'diffusion_curvature.random_surfaces': { 'diffusion_curvature.random_surfaces.manifold_density': ( 'library/random.html#manifold_density',
                                                                                                               'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.max_value': ( 'library/random.html#max_value',
                                                                                                        'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.random_polynomial': ( 'library/random.html#random_polynomial',
                                                                                                                'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.random_surface': ( 'library/random.html#random_surface',
                                                                                                             'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.rejection_sample_from_surface': ( 'library/random.html#rejection_sample_from_surface',
                                                                                                                            'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.riemannian_curvature_tensor': ( 'library/random.html#riemannian_curvature_tensor',
                                                                                                                          'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.samples_from_random_surface': ( 'library/random.html#samples_from_random_surface',
                                                                                                                          'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.scalar_curvature_at_origin': ( 'library/random.html#scalar_curvature_at_origin',
                                                                                                                         'diffusion_curvature/random_surfaces.py'),
                                                     'diffusion_curvature.random_surfaces.second_fundamental_form': ( 'library/random.html#second_fundamental_form',
                                                                                                                      'diffusion_curvature/random_surfaces.py')},
            'diffusion_curvature.utils': { 'diffusion_curvature.utils.kronecker_delta': ( 'library/utils.html#kronecker_delta',
                                                                                          'diffusion_curvature/utils.py'),
                                           'diffusion_curvature.utils.perform_trials': ( 'library/utils.html#perform_trials',
                                                                                         'diffusion_curvature/utils.py'),
                                           'diffusion_curvature.utils.plot_3d': ( 'library/utils.html#plot_3d',
                                                                                  'diffusion_curvature/utils.py'),
                                           'diffusion_curvature.utils.plot_array': ( 'library/utils.html#plot_array',
                                                                                     'diffusion_curvature/utils.py'),
                                           'diffusion_curvature.utils.random_jnparray': ( 'library/utils.html#random_jnparray',
                                                                                          'diffusion_curvature/utils.py')},
            'diffusion_curvature.vne': { 'diffusion_curvature.vne.compute_von_neumann_entropy': ( 'library/diffusion.html#compute_von_neumann_entropy',
                                                                                                  'diffusion_curvature/vne.py'),
                                         'diffusion_curvature.vne.find_knee_point': ( 'library/diffusion.html#find_knee_point',
                                                                                      'diffusion_curvature/vne.py'),
                                         'diffusion_curvature.vne.optimal_t_via_vne': ( 'library/diffusion.html#optimal_t_via_vne',
                                                                                        'diffusion_curvature/vne.py')},
            'diffusion_curvature.volume': { 'diffusion_curvature.volume.actual_euclidean_volumes_at_radii': ( 'library/volume.html#actual_euclidean_volumes_at_radii',
                                                                                                              'diffusion_curvature/volume.py'),
                                            'diffusion_curvature.volume.calculate_radius_offset': ( 'library/volume.html#calculate_radius_offset',
                                                                                                    'diffusion_curvature/volume.py'),
                                            'diffusion_curvature.volume.volume_via_heat_at_scales': ( 'library/volume.html#volume_via_heat_at_scales',
                                                                                                      'diffusion_curvature/volume.py')},
            'diffusion_curvature.volume_comparison': { 'diffusion_curvature.volume_comparison.extract_scalar_curvature': ( 'experiments/curvature.html#extract_scalar_curvature',
                                                                                                                           'diffusion_curvature/volume_comparison.py'),
                                                       'diffusion_curvature.volume_comparison.extract_scalar_curvature_with_offset_compensation': ( 'experiments/curvature.html#extract_scalar_curvature_with_offset_compensation',
                                                                                                                                                    'diffusion_curvature/volume_comparison.py'),
                                                       'diffusion_curvature.volume_comparison.scalar_curvatures_of_graph': ( 'experiments/curvature.html#scalar_curvatures_of_graph',
                                                                                                                             'diffusion_curvature/volume_comparison.py'),
                                                       'diffusion_curvature.volume_comparison.volume_comparisons_of_graph_at_idx': ( 'experiments/curvature.html#volume_comparisons_of_graph_at_idx',
                                                                                                                                     'diffusion_curvature/volume_comparison.py')}}}